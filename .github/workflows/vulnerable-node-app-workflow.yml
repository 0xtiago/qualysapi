name: 🐞 OWASP Vulnerable Node Application - Action workflow example for QUALYS WAS API.
on:
  push:
    branches:
      - main
    paths:
      - examples/apps/vulnerable-node-app/**
  pull_request:
    branches: 
      - main
    paths:
      - examples/apps/vulnerable-node-app/**

jobs:
  build:
    runs-on: ubuntu-22.04
    environment: Qualys
    steps:
    - uses: actions/checkout@v3
    - name: 🚀 Setup Ubuntu 22.04 Runner
      run: |
        sudo apt update
        sudo apt install -y sudo net-tools wget git curl p7zip-full ca-certificates apt-transport-https software-properties-common \
          pssh python3 python3-pip python-setuptools
    
    - name: 🚀 Setup web server (Cloud VPS).
      #continue-on-error: true
      env:
        SSH_SERVER: ${{ secrets.SSH_SERVER }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_KEY: ${{ secrets.SSH_KEY }}
        APP_URL: ${{ secrets.APP_URL }}
      run: |
        echo "Deploying SSH Key"
        echo "-----BEGIN OPENSSH PRIVATE KEY-----" > /tmp/server.key
        echo $SSH_KEY | base64 -w0 | base64 --decode | tr " " "\n" | tail -n +5 | head -n-4 >> /tmp/server.key
        echo "-----END OPENSSH PRIVATE KEY-----" >> /tmp/server.key
        sudo chmod 600 /tmp/server.key
        cat /tmp/server.key

        echo "Testing connection calling date command."
        parallel-ssh -t 300 -H $SSH_USER@$SSH_SERVER -i -x "-i /tmp/server.key -o StrictHostKeyChecking=no" 'date'

        echo "Stop and cleaning last build."
        echo "Listing running containers."
        parallel-ssh -t 300  -H $SSH_USER@$SSH_SERVER -i -x "-i /tmp/server.key -o StrictHostKeyChecking=no" 'docker ps -q | \
          tee /tmp/running_containers.txt'
        
        echo "Killing each container and wiping everything."
        parallel-ssh -t 300 -H $SSH_USER@$SSH_SERVER -i -x "-i /tmp/server.key -o StrictHostKeyChecking=no" 'while read -r line; do \
          sudo docker kill "$line" ; done < /tmp/running_containers.txt'
        parallel-ssh -t 300 -H $SSH_USER@$SSH_SERVER -i -x "-i /tmp/server.key -o StrictHostKeyChecking=no" 'sudo docker system prune -a -f'

        echo "Deploying and building vulnerable Node application."
        parallel-ssh -t 300 -H $SSH_USER@$SSH_SERVER -i -x "-i /tmp/server.key -o StrictHostKeyChecking=no" 'rm -rf NodeGoat; sleep 5'
        parallel-ssh -t 300 -H $SSH_USER@$SSH_SERVER -i -x "-i /tmp/server.key -o StrictHostKeyChecking=no" \
          'git clone https://github.com/0xtiago/NodeGoat 2>&1; sleep 15'
        parallel-ssh -t 300 -H $SSH_USER@$SSH_SERVER -i -x "-i /tmp/server.key -o StrictHostKeyChecking=no" 'cd NodeGoat ; \
          sudo docker-compose build  && sudo docker-compose up -d ; sleep 60'
       
        echo -e "Waiting for the application deployment..." ; spin='-\|/' && i=0 && until curl http://$APP_URL --connect-timeout 3 2>/dev/null ; \
          do i=$(( (i+1) %4 )) ;  printf "\r${spin:$i:1}" sleep .1 ; done ;echo -e "\n\nApplication ready for scanning!"
        echo "Built and available at port 80/tcp."

    - name: 🔥 Downloading and configuring Qualys API script.
      run: |
        git clone https://github.com/0xtiago/qualysapi
        

    - name: 🔥 Lauching web vulnerability scan. Coffee time! ☕ 
      env:
        SSH_SERVER: ${{ secrets.SSH_SERVER }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_KEY: ${{ secrets.SSH_KEY }} 
        QUALYS_SCANNER_TYPE: ${{ vars.QUALYS_SCANNER_TYPE }}
        QUALYS_URL: ${{ vars.QUALYS_URL }}
        QUALYS_USER: ${{ secrets.QUALYS_USER }}
        QUALYS_USER_PASS: ${{ secrets.QUALYS_USER_PASS }}
        QUALYS_PROJECT_NAME: ${{ vars.QUALYS_PROJECT_NAME }}
        QUALYS_WEBAPP_ID: ${{ vars.QUALYS_WEBAPP_ID }}
        QUALYS_OPTION_PROFILE_ID: ${{ vars.QUALYS_OPTION_PROFILE_ID }}
        QUALYS_SEND_REPORT: ${{ vars.QUALYS_SEND_REPORT }}
        QUALYS_ENCRYPT_REPORT: ${{ vars.QUALYS_ENCRYPT_REPORT }}
        QUALYS_ENCRYPT_PASS: ${{ secrets.QUALYS_ENCRYPT_PASS }}
        QUALYS_REPORT_RECEIVERS: ${{ vars.QUALYS_REPORT_RECEIVERS }}
      run: |
        cd qualysapi
        chmod +x qualysapi.sh
        ./qualysapi.sh | tee -a log/qualysapi.log
    
    - name: 🧹 Cleaning web server (Cloud VPS).
      env:
        SSH_SERVER: ${{ secrets.SSH_SERVER }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_KEY: ${{ secrets.SSH_KEY }}
      run: |
        echo "Listing running containers."
        parallel-ssh -t 300 -H $SSH_USER@$SSH_SERVER -i -x "-i /tmp/server.key -o StrictHostKeyChecking=no" 'sudo docker ps -q | \
          tee /tmp/running_containers.txt'

        echo "Killing each container."
        parallel-ssh -t 300 -H $SSH_USER@$SSH_SERVER -i -x "-i /tmp/server.key -o StrictHostKeyChecking=no" 'sudo while read -r line; \
          do docker kill "$line" ; done < /tmp/running_containers.txt'

        echo "Wiping everything."
        parallel-ssh -t 300 -H $SSH_USER@$SSH_SERVER -i -x "-i /tmp/server.key -o StrictHostKeyChecking=no" 'sudo docker system prune -a -f'
        parallel-ssh -t 300 -H $SSH_USER@$SSH_SERVER -i -x "-i /tmp/server.key -o StrictHostKeyChecking=no" 'sudo rm -rf NodeGoat'
        echo "Done. Good bye!"